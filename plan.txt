1.Authentication(Signup , logic manually social auth, update profile ,get profite.

2.Layout
3.Course
4.Analytics
5.Orders
6.Notification



new technology used 

medium scale application 

in near future its glow like (becodemy)

next.js some time not next.js

want implement critical feature next.js not suitable for suggestion also node.js not suggested as well.

for largest website use Django 

~caching data maintain (fronted and backend caching data)
for maintaining over load and buffer.
cache data what we use in data to access quickly then we expect about.






Coding Part Using VScode

we using extension like 

~ console ninja
~ES7+ react
~ESLint
~gitgraph
~ mithril enmnet 
~ path intellisen

~get good connectivity with API.  

~get an real time response and request



install required file in terminal 



~npm i bcryptjs cookie-parser cors dotenv express ioredis jsonwebtoken mongoose ts-node-dev @types/bcryptjs @types/cookie-parser @types/cors @types/dotenv @types/express @types/ioredis @types/jsonwebtoken @types/mongoose @types/node typescript

app.ts create
app.ts{require('dotenv').config(); // Load environment variables

import express, { Request, Response, NextFunction } from 'express'; // Import types
import cors from 'cors';
import cookieParser from 'cookie-parser';

export const app = express(); // Initialize Express app

// Body parser middleware
app.use(express.json({ limit: '50mb' }));

// Cookie parser middleware
app.use(cookieParser());

// CORS middleware
app.use(cors({
   origin: process.env.ORIGIN, // Corrected typo
}));

// Testing API endpoint
app.get('/test', (req: Request, res: Response, next: NextFunction) => {
   res.status(200).json({
      success: true,
      message: 'API is working', // Corrected spelling
   });
});

// Unknown route handler
app.all('*', (req: Request, res: Response, next: NextFunction) => {
   const err = new Error(`Route ${req.originalUrl} not found`) as any; // Corrected typo
   err.statusCode = 404;
   next(err);
});



create server.ts 

import {app} from "./app";
require("dotenv").config();


app.listen(process.env.PORT, () => {
    console.log(`Server is connected with port ${process.env.PORT}`)
})

}


.env create {
PORT = 8000

ORIGIN = ['http://localhost:3000']}

go to the Package.json in scripts add
("dev":"ts-node-dev --respawn --transpile-only server.ts")


show all the work done for little setup now we need to connect throw the database  , cloud and redis for data transfer.


now create

create new folder utils 
in utils create database.ts


now we need to connect to 3 website for 

mangodbatlas,cloudinary,upstash`


mangodb password remember GcFhtBg8yZTeLxhQ

and put in this password part mongodb+srv://support:<db_password>@prime.f3uip.mongodb.net/

put in .env file with 

NODE_ENV = development

DB_URL = mongodb+srv://support:GcFhtBg8yZTeLxhQ@prime.f3uip.mongodb.net/


now turn for cloudinary 

so go to cloudinary copy name , api , secret 

then in env use 

CLOUD_NAME =
CLOUD_API_KEY =
CLOUD_SECRET_KEY = 

then  create account in upstash 

REDIS_URL =(copy the url from the web site ) and make a change redis to 







for connect to databse we go db.ts

import mongoose from 'mongoose';
require('dotenv').config();

const dbUrl:string = process.env.DB_URL || '';

const connectDB = async () => {
    try{
         awai mongoose.connect(dbUrl).then((data:any) =>
              console.log(`Database connected with ${data.connection.host}`)
         })
     }
     catch (error){
         console.log(error.message);
         setTimeout(connectDB , 5000);
     }
}

export default connectDB;


go to server.ts 
      app.listen add

      connectDB();


now create a redis file for in utils as redis.ts

import {Redis} from 'ioredis';
require('dotenv').config();



const redisClient = () => {
      if (process.env.REDIS_URL){
          console.log(`Redis connected failed`);
          return process.env.REDIS_URL;
       }
       throw new Error('Redis connection failed');
};

export const redis = new Redis(redisClient());

after setup of redit 
go for creating an exception handing
and error management 

create file 
middleware/error.ts

utils create a file as 
ErrorHandler.ts


ErrorHandler 

{

class ErrorHandler extends Error{
     statusCode: number;
     
     constructor(message:any, statusCode:Number){
           super(message);
           this.statusCode = statusCode;
          
           Error.captureStackTrace(this,this.constructor);
   }
}

export default ErrorHandler


that part done done error handler now going for error.ts 
for invalid error occur at authentication and server now working time .


error.ts{

import { Request, Response, NextFunction } from "express";
import ErrorHandler from "../utils/ErrorHandler";

export const ErrorMiddleware = (err: any, req: Request, res: Response, next: NextFunction) => {

    // Set default error status code and message
    err.statusCode = err.statusCode || 500;
    err.message = err.message || "Internal Server Error";

    // Wrong MongoDB ID error (CastError)
    if (err.name === 'CastError') {
        const message = `Resource not found. Invalid: ${err.path}`;
        err = new ErrorHandler(message, 400);
    }

    // Duplicate key error (Mongoose unique field error)
    if (err.code === 11000) {
        const message = `Duplicate field value: ${Object.keys(err.keyValue)} entered.`;
        err = new ErrorHandler(message, 400);
    }

    // JWT error: Invalid token
    if (err.name === 'JsonWebTokenError') {
        const message = `Invalid JSON Web Token. Please try again.`;
        err = new ErrorHandler(message, 400);
    }

    // JWT error: Token expired
    if (err.name === 'TokenExpiredError') {
        const message = `Your JSON Web Token has expired. Please try again.`;
        err = new ErrorHandler(message, 400);
    }

    // Send error response
    res.status(err.statusCode).json({
        success: false,
        message: err.message,
        // Optionally include stack trace for development environments:
        stack: process.env.NODE_ENV === 'development' ? err.stack : undefined
    });
};
    

go to app.ts or 
import 

import ErrorHandler from "./middleware/error";


now create a file in middleware 

catchAsyncErrors.ts


import {NextFunction, Request , Response } from "express";

export const CatchASyncError = 
       (theFunc:any) => (req: Request,res: Response,next: NextFunction) => {
        Promise.resolve(theFunc(req,res,next)).catch(next);
    };
    
complete error management 
now we create a folder for model designing


import mongoose, { Document, Model, Schema } from "mongoose";
import bcrypt from "bcryptjs";

const emailRegexPattern: RegExp = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

export interface IUser extends Document {
  name: string;
  email: string;
  password: string;
  avatar: {
    public_id: string;
    url: string;
  };
  role: string;
  isVerified: boolean;
  courses: Array<{ courseId: string }>;
  comparePassword: (password: string) => Promise<boolean>;
}

const userSchema: Schema<IUser> = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "Please enter your name"],
    },
    email: {
      type: String,
      required: [true, "Please enter your email"],
      validate: {
        validator: function (value: string) {
          return emailRegexPattern.test(value);
        },
        message: "Please enter a valid email",
      },
      unique: true,
    },
    password: {
      type: String,
      required: [true, "Please enter your password"],
      minlength: [6, "Password must be at least 6 characters"],
      select: false,
    },
    avatar: {
      public_id: { type: String, required: true },
      url: { type: String, required: true },
    },
    role: {
      type: String,
      default: "user",
    },
    isVerified: {
      type: Boolean,
      default: false,
    },
    courses: [
      {
        courseId: {
          type: String,
        },
      },
    ],
  },
  { timestamps: true }
);

// Hash password before saving
userSchema.pre<IUser>("save", async function (next) {
  if (!this.isModified("password")) {
    return next();
  }
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

// Compare password
userSchema.methods.comparePassword = async function (
  enteredPassword: string
): Promise<boolean> {
  return await bcrypt.compare(enteredPassword, this.password);
};

const UserModel: Model<IUser> = mongoose.model<IUser>("User", userSchema);

export default UserModel;










 



 

























